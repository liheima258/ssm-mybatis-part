<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="com.atguigu.mapper.EmployeeMapper">

    <!-- 使用sql标签抽取重复出现的SQL片段 -->
    <sql id="mySelectSql">
        select * from t_emp
    </sql>

    <!-- List<Employee> selectEmployeeByCondition(Employee employee); -->
    <select id="selectEmployeeByCondition" resultType="employee">

        <!-- 使用include标签引用声明的SQL片段  ==>  select * from t_emp  -->
        <include refid="mySelectSql"/>
        <!-- where标签会自动去掉“标签体内前面多余的and/or” -->
        <where>
            <!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true -->
            <!-- 在if标签的test属性中，可以访问实体类的属性，从而进行判断 -->
            <if test="empName != null">
                <!-- 在if标签内部，需要访问接口的参数时还是正常写#{} -->
                emp_name=#{empName}
            </if>
            <if test="empSalary > 300">
                or emp_salary > #{empSalary}
            </if>
        </where>
    </select>

    <!-- int updateEmployeeDynamic(Employee employee); -->
    <update id="updateEmployeeDynamic">
        update t_emp
        <!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 -->
        <set>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary > 100">
                emp_salary=#{empSalary},
            </if>
        </set>
        where emp_id=#{empId}
    </update>

    <!-- List<Employee> selectEmployeeByConditionByChoose(Employee employee); -->
    <!-- 在多个分支条件中，仅执行一个。
         从上到下依次执行条件判断
         遇到的第一个满足条件的分支会被采纳
         被采纳分支后面的分支都将不被考虑
         如果所有的when分支都不满足，那么就执行otherwise分支-->
    <select id="selectEmployeeByConditionByChoose" resultType="employee">
        <include refid="mySelectSql"/>
        where
        <choose>
            <when test="empName != null">emp_name=#{empName}</when>
            <when test="empSalary > 200">emp_salary > 200</when>
            <otherwise>1=1</otherwise>
        </choose>
    </select>

    <!-- int insertEmployeeBatch(@Param("empList") List<Employee> employeeList);-->
    <insert id="insertEmployeeBatch">
        insert into t_emp(emp_name,emp_salary) values
        <!--
            collection属性：要遍历的集合
            item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象
            separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符
            open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串
            close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串
            index属性：这里起一个名字，便于后面引用
        -->
        <foreach collection="empList" item="emp" separator=",">
            (#{emp.empName},#{emp.empSalary})
        </foreach>
    </insert>

    <!-- int updateEmployeeBatch(@Param("empList") List<Employee> empList); -->
    <!-- 下面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。
         也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：
                                          jdbc:mysql:///mybatis-example?allowMultiQueries=true-->
    <update id="updateEmployeeBatch">
        <foreach collection="empList" item="emp" separator=";">
            update t_emp set emp_name=#{emp.empName} where emp_id=#{emp.empId}
        </foreach>
    </update>
</mapper>